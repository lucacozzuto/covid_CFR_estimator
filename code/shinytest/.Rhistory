library(shiny)
library(gridExtra)
library(shinycssloaders)
library(dplyr)
desc<-"Estimating the case fatality rate (CFR) of an ongoing pandemics is a complex problem. <br/> On average a person die of Covid19 after two weeks from the contagion, but delay in reporting the number of positives or deaths may alter this correlation. <br/> This app infers the lag between the trend of people positives to Covid19 and the deaths in a particular moment. <br/> A shorter lag can indicate a inefficient testing, while a longer one can indicate delay in reporting the deaths. <br/> This lag is then used to estimate the CFR for forecasting the number of future fatalities from the number of positives. <br/> You can select 3 different datasets offered by: the John Hopkins resource centre, the European Centre for Disease Prevention and Control (ECDC) and the Italian Protezione Civile for the Italian regions. <br/> After selecting the dataset you can choose a country / region."
# Define UI ----
ui <- fluidPage(
  titlePanel("CFR estimator for Covid19"),
 sidebarLayout( 
  sidebarPanel(
    selectInput("source_data", h3("Select dataset"), 
                       choices = list("John Hopkins" = "JH", "John Hopkins (USA)" = "JHUSA", "ECDC" = "ECDC", "Protezione Civile (Italy)" = "PC"), selected = "JH"), 
    uiOutput("ui"),
 
    sliderInput("start_time", h3("Interval to scan"),
                       min = 1, max = 60, value = 45),
    sliderInput("time_window", h3("Moving window"),
                       min = 1, max = 120, value = 90),
    numericInput("force_ylim", 
                        h3("Max Y value"), 
                        value = 0),
    sliderInput("force_del", h3("Manual delay"),
                       min = 0, max = 60, value = 0),
    sliderInput("go_back", h3("Go back in time"),
                       min = 0, max = 120, value = 0),
    sliderInput("cfr_time", h3("Days for CFR estimation"),
                       min = 2, max = 60, value = 30),
uiOutput("for_time")
),
    mainPanel(
    p("Author: Luca Cozzuto"),
      tabsetPanel(
        tabPanel("Trend", htmlOutput("view"), plotOutput("plot") %>% withSpinner(color="#0dc5c1")),
        tabPanel("Var", plotOutput("plot2")),
        tabPanel("CFR", plotOutput("plot3")),
        tabPanel("Info", HTML(desc))
      )
    #plotOutput('plot')
    #tableOutput("view2")
    )
  )
)
quit("yes")
rsconnect::deployApp('./')
rsconnect::deployApp('./')
  plot = reactiveVal()
  getData = reactiveVal()
library(shiny)
library(gridExtra)
library(shinycssloaders)
library(dplyr)
desc<-"Estimating the case fatality rate (CFR) of an ongoing pandemics is a complex problem. <br/> On average a person die of Covid19 after two weeks from the contagion, but delay in reporting the number of positives or deaths may alter this correlation. <br/> This app infers the lag between the trend of people positives to Covid19 and the deaths in a particular moment. <br/> A shorter lag can indicate a inefficient testing, while a longer one can indicate delay in reporting the deaths. <br/> This lag is then used to estimate the CFR for forecasting the number of future fatalities from the number of positives. <br/> You can select 3 different datasets offered by: the John Hopkins resource centre, the European Centre for Disease Prevention and Control (ECDC) and the Italian Protezione Civile for the Italian regions. <br/> After selecting the dataset you can choose a country / region."
# Define UI ----
ui <- fluidPage(
  titlePanel("CFR estimator for Covid19"),
 sidebarLayout( 
  sidebarPanel(
    selectInput("source_data", h3("Select dataset"), 
                       choices = list("John Hopkins" = "JH", "John Hopkins (USA)" = "JHUSA", "ECDC" = "ECDC", "Protezione Civile (Italy)" = "PC"), selected = "JH"), 
    uiOutput("ui"),
 
    sliderInput("start_time", h3("Interval to scan"),
                       min = 1, max = 60, value = 45),
    sliderInput("time_window", h3("Moving window"),
                       min = 1, max = 120, value = 90),
    numericInput("force_ylim", 
                        h3("Max Y value"), 
                        value = 0),
    sliderInput("force_del", h3("Manual delay"),
                       min = 0, max = 60, value = 0),
    sliderInput("go_back", h3("Go back in time"),
                       min = 0, max = 120, value = 0),
    sliderInput("cfr_time", h3("Days for CFR estimation"),
                       min = 2, max = 60, value = 30),
uiOutput("for_time")
),
    mainPanel(
    p("Author: Luca Cozzuto"),
      tabsetPanel(
        tabPanel("Trend", htmlOutput("view"), plotOutput("plot") %>% withSpinner(color="#0dc5c1")),
        tabPanel("Var", plotOutput("plot2")),
        tabPanel("CFR", plotOutput("plot3")),
        tabPanel("Info", HTML(desc))
      )
    #plotOutput('plot')
    #tableOutput("view2")
    )
  )
)
#rsconnect::deployApp('./')
library(shiny)
library(shinycssloaders)
source("functions.R")
# Get the data
# JH
jh_data<-getDataFromJH(death_web, cases_web)
# JHUSA
jhus_data<-getDataFromJH(death_web_US, cases_web_US, TRUE)
# ECDC
ecdc_data<-(getDataFromECDC(ecdc_web))
# PC
ita_data<-(getDataFromITA(ita_web))
#Example 
#single_country_data<-getSingleCountryData(jhus_data, "Alabama", "JHUSA")
#predCFR<-calcCFR(single_country_data, input$start_time, input$time_window, input$go_back,input$for_time, input$force_del, input$cfr_time)
#predCFR<-calcCFR(single_country_data, 45, 90, NULL, 7, NULL, 30)
# Define server logic ----
server <- function(input, output) {
 
  # Return the requested dataset
  datasetInput <- reactive({
    req(input$source_data)
    switch(input$source_data,
           "ECDC" = ecdc_data,
           "JH" = jh_data,
           "JHUSA" = jhus_data,
           "PC" = ita_data)
  })
   # choose the country
   output$ui <- renderUI({
source_data<-datasetInput()
  countries <- unique(source_data$country)
    selectInput("country", h3("Choose country"), countries, selected="Italy") 
})
  plot = reactiveVal()
  getData = reactiveVal()
   output$for_time <- renderUI({
  maxval <- 30
  if (!is.null(getData())) {
   maxval <- getData()$
   }
    sliderInput("for_time", h3("Days for forecast"),
                       min = 2, max = input$delay, value = 7)
})
 getData = reactive({
res = NULL
  single_country_data = getSingleCountryData(datasetInput(), input$country, input$source_data)
if (!is.null(single_country_data)) {
res =calcCFR(single_country_data, input$start_time, input$time_window, input$go_back,input$for_time, input$force_del, input$cfr_time  )
} 
return(res)
})
output$plot <- renderPlot({
if (!is.null(getData())) {
plotTrend(getData(), input$force_ylim)
}
    }, height=600, width=1200)
output$plot2 <- renderPlot({
if (!is.null(getData())) {
plotVAR(getData())
    }
    }, height=600, width=600)
output$plot3 <- renderPlot({
if (!is.null(getData())) {
plotCFR(getData())
}
    }, height=600, width=600)
       
  output$view <- renderText({
if (!is.null(getData())) {
makeRes(getData(), input$source_data, input$for_time)
  } else {
  paste0("Loading data...")
  }
  })
}
library(shiny)
library(gridExtra)
library(shinycssloaders)
library(dplyr)
desc<-"Estimating the case fatality rate (CFR) of an ongoing pandemics is a complex problem. <br/> On average a person die of Covid19 after two weeks from the contagion, but delay in reporting the number of positives or deaths may alter this correlation. <br/> This app infers the lag between the trend of people positives to Covid19 and the deaths in a particular moment. <br/> A shorter lag can indicate a inefficient testing, while a longer one can indicate delay in reporting the deaths. <br/> This lag is then used to estimate the CFR for forecasting the number of future fatalities from the number of positives. <br/> You can select 3 different datasets offered by: the John Hopkins resource centre, the European Centre for Disease Prevention and Control (ECDC) and the Italian Protezione Civile for the Italian regions. <br/> After selecting the dataset you can choose a country / region."
# Define UI ----
ui <- fluidPage(
  titlePanel("CFR estimator for Covid19"),
 sidebarLayout( 
  sidebarPanel(
    selectInput("source_data", h3("Select dataset"), 
                       choices = list("John Hopkins" = "JH", "John Hopkins (USA)" = "JHUSA", "ECDC" = "ECDC", "Protezione Civile (Italy)" = "PC"), selected = "JH"), 
    uiOutput("ui"),
 
    sliderInput("start_time", h3("Interval to scan"),
                       min = 1, max = 60, value = 45),
    sliderInput("time_window", h3("Moving window"),
                       min = 1, max = 120, value = 90),
    numericInput("force_ylim", 
                        h3("Max Y value"), 
                        value = 0),
    sliderInput("force_del", h3("Manual delay"),
                       min = 0, max = 60, value = 0),
    sliderInput("go_back", h3("Go back in time"),
                       min = 0, max = 120, value = 0),
    sliderInput("cfr_time", h3("Days for CFR estimation"),
                       min = 2, max = 60, value = 30),
uiOutput("for_time")
),
    mainPanel(
    p("Author: Luca Cozzuto"),
      tabsetPanel(
        tabPanel("Trend", htmlOutput("view"), plotOutput("plot") %>% withSpinner(color="#0dc5c1")),
        tabPanel("Var", plotOutput("plot2")),
        tabPanel("CFR", plotOutput("plot3")),
        tabPanel("Info", HTML(desc))
      )
    #plotOutput('plot')
    #tableOutput("view2")
    )
  )
)
#rsconnect::deployApp('./')
library(shiny)
library(shinycssloaders)
source("functions.R")
# Get the data
# JH
jh_data<-getDataFromJH(death_web, cases_web)
# JHUSA
jhus_data<-getDataFromJH(death_web_US, cases_web_US, TRUE)
# ECDC
ecdc_data<-(getDataFromECDC(ecdc_web))
# PC
ita_data<-(getDataFromITA(ita_web))
#Example 
#single_country_data<-getSingleCountryData(jhus_data, "Alabama", "JHUSA")
#predCFR<-calcCFR(single_country_data, input$start_time, input$time_window, input$go_back,input$for_time, input$force_del, input$cfr_time)
#predCFR<-calcCFR(single_country_data, 45, 90, NULL, 7, NULL, 30)
# Define server logic ----
server <- function(input, output) {
 
  # Return the requested dataset
  datasetInput <- reactive({
    req(input$source_data)
    switch(input$source_data,
           "ECDC" = ecdc_data,
           "JH" = jh_data,
           "JHUSA" = jhus_data,
           "PC" = ita_data)
  })
   # choose the country
   output$ui <- renderUI({
source_data<-datasetInput()
  countries <- unique(source_data$country)
    selectInput("country", h3("Choose country"), countries, selected="Italy") 
})
  plot = reactiveVal()
  getData = reactiveVal()
   output$for_time <- renderUI({
  maxval <- 30
  if (!is.null(getData())) {
   maxval <- getData()$delay
   }
    sliderInput("for_time", h3("Days for forecast"),
                       min = 2, max = input$delay, value = 7)
})
 getData = reactive({
res = NULL
  single_country_data = getSingleCountryData(datasetInput(), input$country, input$source_data)
if (!is.null(single_country_data)) {
res =calcCFR(single_country_data, input$start_time, input$time_window, input$go_back,input$for_time, input$force_del, input$cfr_time  )
} 
return(res)
})
output$plot <- renderPlot({
if (!is.null(getData())) {
plotTrend(getData(), input$force_ylim)
}
    }, height=600, width=1200)
output$plot2 <- renderPlot({
if (!is.null(getData())) {
plotVAR(getData())
    }
    }, height=600, width=600)
output$plot3 <- renderPlot({
if (!is.null(getData())) {
plotCFR(getData())
}
    }, height=600, width=600)
       
  output$view <- renderText({
if (!is.null(getData())) {
makeRes(getData(), input$source_data, input$for_time)
  } else {
  paste0("Loading data...")
  }
  })
}
rsconnect::deployApp('./')
rsconnect::deployApp('./')
rsconnect::deployApp('./')
rsconnect::deployApp('./')
rsconnect::deployApp('./')
rsconnect::deployApp('./')
rsconnect::deployApp('./')
rsconnect::deployApp('./')
rsconnect::deployApp('./')
rsconnect::deployApp('./')
rsconnect::deployApp('./')
rsconnect::deployApp('./')
rsconnect::deployApp('./')
rsconnect::deployApp('./')
rsconnect::deployApp('./')
rsconnect::deployApp('./')
rsconnect::deployApp('./')
rsconnect::deployApp('./')
rsconnect::deployApp('./')
rsconnect::deployApp('./')
rsconnect::deployApp('./')
quit("yes")
